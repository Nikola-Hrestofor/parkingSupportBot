import telebot;
import logging;
from telebot import types as ty

# from registration import reg 
# from searchPhone import search as searchNumber
# from getIdByNumber import search as searchId
from bd import getIdBuNumber, reg, searchPhone, isExistsById, searchPhoneById, searchCarNumberById, deleteById

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)


bot = telebot.TeleBot('2034711051:AAFzh9AnJsqxsrqA6MnmbaRp59omtJg7F3Q');

phone = 0
carNumber = ''
userName = ''
userId = 0
name = ''
model = ''


@bot.message_handler(content_types=['text'])
def start(message):
    if message.text == '/start':
        print('New user ' + message.from_user.username)
        bot.send_message(189437726, "New user @" + message.from_user.username);
        bot.send_message(message.from_user.id, 
                            '/registration - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n' 
                            '/search - –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n'
                            '/block - —Å–æ–æ–±—â–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã–ª–∏\n'
                            '/evacuation - —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —ç–≤–∞–∫—É–∏—Ä—É—é—Ç\n'
                            '/del - —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –º–∞—à–∏–Ω—É\n'
                            '–í–æ–ø—Ä–æ—Å—ã, –∂–∞–ª–æ–±—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é —Å—é–¥–∞ üëâ @nikola_fp')
    elif message.text == '/help':
        bot.send_message(message.from_user.id, 
                            '/registration - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n' 
                            '/search - –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n'
                            '/block - —Å–æ–æ–±—â–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã–ª–∏\n'
                            '/evacuation - —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —ç–≤–∞–∫—É–∏—Ä—É—é—Ç\n'
                            '/del - —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –º–∞—à–∏–Ω—É\n'
                            '–í–æ–ø—Ä–æ—Å—ã, –∂–∞–ª–æ–±—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—é–¥–∞ üëâ @nikola_fp')
    elif message.text == '/registration':
        global userName
        global userId
        userName = message.from_user.username
        userId = message.from_user.id
        # TO DO –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        bot.send_message(message.from_user.id, "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        bot.register_next_step_handler(message, setPhone)
        print(logger)
    elif message.text == '/search':
        # TO DO –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é      
        if isExistsById(message.from_user.id):
            bot.send_message(message.from_user.id, "–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è");
            bot.register_next_step_handler(message, getPhoneByCarNumber)
        else:
            bot.send_message(message.from_user.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /registration");
    elif message.text == '/block':
        # TO DO –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–∫—Ä—ã—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∏ –º—ã —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º –≤–ª–∞–¥–µ–ª—å—Ü—É");
        bot.register_next_step_handler(message, comment)
    elif message.text == '/evacuation':
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —É–≤–µ–∑—Ç–∏, –∏ –º—ã —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º –≤–ª–∞–¥–µ–ª—å—Ü—É");
        bot.register_next_step_handler(message, evacuationInform)
    elif message.text == '/del':
        if isExistsById(message.from_user.id):
            keyboard = ty.InlineKeyboardMarkup(); #–Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            for number in searchCarNumberById(message.from_user.id):
                key = ty.InlineKeyboardButton(text=number[1], callback_data=number[0]); #–∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
                keyboard.add(key);
            question = '–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?';
            bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)
        else:
            bot.send_message(message.from_user.id, "–í–∞—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ");

def comment(message):
    global carNumber
    carNumber = repl(message.text.upper())
    bot.send_message(message.from_user.id, "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(–≤—Ä–µ–º—è —É–±—ã—Ç–∏—è, —Ü–≤–µ—Ç –º–∞—à–∏–Ω—ã..)");
    bot.register_next_step_handler(message, report)


def report(message):
    global carNumber
    comment = message.text
    # phone = str(searchPhoneById(message.from_user.id))
    phone = ''
    if searchPhoneById(message.from_user.id):
        for phone_i in searchPhoneById(message.from_user.id):
            phone = phone + ', ' + phone_i[0]
    phone = phone[2:]
    print(phone)
    print ('New report ')
    bot.send_message(189437726, "New report " + phone);
    
    if getIdBuNumber(carNumber):
        for id in getIdBuNumber(carNumber):
            bot.send_message(id[0], '–í–∞—Å –ø–µ—Ä–µ–∫—Ä—ã–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ @' + message.from_user.username + ', —Ç–µ–ª–µ—Ñ–æ–Ω: ' + str(phone) + '\n'
             + '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ' + comment);
    else:
        bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º..(');

def evacuationInform(message):
    carNumber = repl(message.text.upper())
    print ('New evacuationInform ')
    bot.send_message(189437726, "New evacuationInform ");
    
    if getIdBuNumber(carNumber):
        for id in getIdBuNumber(carNumber):
            bot.send_message(id[0], '–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º ' + carNumber + '–∫–∞–∂–µ—Ç—Å—è, —ç–≤–∞–∫—É–∏—Ä—É—é—Ç ;(');
    else:
        bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º..(');

def setPhone(message): 
    global phone;

    phone = message.text
    bot.send_message(message.from_user.id, "–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?");
    bot.register_next_step_handler(message, setName);

def setName(message): 
    global name;

    name = message.text
    bot.send_message(message.from_user.id, "–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è");
    bot.register_next_step_handler(message, setCarNumber);

def setCarNumber(message): 
    global carNumber;
    carNumber = repl(message.text.upper());   
    bot.send_message(message.from_user.id, "–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è");
    bot.register_next_step_handler(message, setModel);

def setModel(message): 
    global model;
    model = message.text;
    # reg(userName, userId, phone, name, carNumber, model)
    setApprove(message)
    # bot.register_next_step_handler(message, get_approve);

def setApprove(message): 
    global carNumber;
    global phone;
    global username;
    global name;
    global model;

    keyboard = ty.InlineKeyboardMarkup(); #–Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    key_yes = ty.InlineKeyboardButton(text='–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!', callback_data='yes'); #–∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
    keyboard.add(key_yes); #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    key_no= ty.InlineKeyboardButton(text='–ù–µ—Ç, –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ :(', callback_data='no');
    keyboard.add(key_no);
    question = '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã, —á—Ç–æ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –ø–æ –∑–∞–ø—Ä–æ—Å—É?';
    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    global carNumber;
    global phone;
    global username;
    global name;
    global model;

    if call.data == "yes": #call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
        reg(userName, userId, phone, name, carNumber, model) #–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∏–ª–∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print('New ures ')
        bot.send_message(189437726, "New ures ");
        bot.send_message(call.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ /search');
    elif call.data == "no":
        print('Rejection')
        bot.send_message(189437726, "Rejection");
        bot.send_message(call.message.chat.id, 'Send /help')
    elif type(call.data) == int:
        print(call.data)
        count = deleteById(call.data)
        print count
        if count > 0:
            bot.send_message(call.message.chat.id, '–£—Å–ø–µ—à–Ω–æ!')
        else:
            bot.send_message(call.message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..')

def getPhoneByCarNumber(message):
    carNumber = repl(message.text.upper())
    print('New search by car number ' + str(carNumber))
    bot.send_message(189437726, "New search by car number " + str(carNumber));
    recordsAD = searchPhone(carNumber)

    if recordsAD:
        for phone in recordsAD:
            bot.send_message(message.from_user.id, '@' + phone[0] + ' —Ç–µ–ª–µ—Ñ–æ–Ω ' + phone[1] + ', –º–∞—Ä–∫–∞ –∞–≤—Ç–æ ' + phone[2]);
    else:
        bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    # if recordsAD == []:
    #     bot.send_message(update.message.from_user.id, 'No result..(');
    # else:
    #     bot.send_message(update.message.from_user.id, '@' + recordsAD);

def repl(text):
    text = text.replace('–£', 'Y')
    text = text.replace('–ö', 'K')
    text = text.replace('–ï', 'E')
    text = text.replace('–ù', 'H')
    text = text.replace('–í', 'B')
    text = text.replace('–ê', 'A')
    text = text.replace('–†', 'P')
    text = text.replace('–û', 'O')
    text = text.replace('–°', 'C')
    text = text.replace('–ú', 'M')
    text = text.replace('–¢', 'T')
    text = text.replace('–•', 'X')

    return text

bot.send_message(189437726, "Restarting");

bot.polling(none_stop=True, interval=0)
# 

    # bot.send_message(message.from_user.id, "Let's reg! Send /registration");
# # def start(update, context):
# #     """Send a message when the command /start is issued."""
# #     update.message.reply_text('Hi!')


# def help_command(update, context):
#     """Send a message when the command /help is issued."""
#     update.message.reply_text('Help!')


# def echo(update, context):
#     """Echo the user message."""
#     print(update.message.text)
#     update.message.reply_text(update.message.text)


# @bot.message_handler(commands=['start'])
# def start(message):
#   username = from_user.username
#   reg(username)


# # def bot_answer(update, context):
# #     answer = go_bot(update.message.text)
# #     print(question, answer)
# #     print(stats)
# #     update.message.reply_text()

# def main():
#     """Start the bot."""
#     updater = Updater("2034711051:AAFzh9AnJsqxsrqA6MnmbaRp59omtJg7F3Q", use_context=True)

#     dp = updater.dispatcher
#     dp.add_handler(CommandHandler("start", start))
#     dp.add_handler(CommandHandler("help", help_command))  
#     dp.add_handler(CommandHandler("registation", registration))
#     dp.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))
#     print(logger)

#     # Start the Bot
#     updater.start_polling()
#     updater.idle()
#     #return

# main()